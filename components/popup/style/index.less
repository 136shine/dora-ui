@import '../../style/vars.less';

@popupPrefix: dora-popup;

.@{popupPrefix} {
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: @popup-zindex;
  pointer-events: none; // amazing! 为none时可以产生点透的效果
  visibility: visible;
  opacity: 1;

  &__hide {
    // 为了离场动画效果 不能直接设置为display:none
    // opacity:0 visibility:hidden 约等于 display:none （文档流除外）
    opacity: 0;
    transition: all 0.2s;
    visibility: hidden; // magic! 也可以实现点透 包括子元素
  }

  .@{popupPrefix}-mask {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .@{popupPrefix}-mask {
    display: none; // mask 默认隐藏
    overflow: hidden;
    background-color: @fill-mask;
    pointer-events: auto;

    // fix some android webview opacity render bug
    &::before {
      content: '.';
      display: block;
      width: 1px;
      height: 1px;
      background-color: rgba(0, 0, 0, 0.1);
      margin-left: -10px;
    }
  }

  &__mask {
    pointer-events: auto;
    .@{popupPrefix}-mask {
      display: block; // 根类具有mask属性时展示mask
    }
  }

  .@{popupPrefix}-content {
    background-color: @toast-fill;
    color: @color-text-base-inverse;
    position: absolute;
    width: 100%;
    box-sizing: border-box;
    pointer-events: auto;
    overflow: scroll;
    -webkit-overflow-scrolling: touch; /* ios5+ */
  }

  &__left,
  &__right,
  &__center {
    .@{popupPrefix}-content {
      width: auto;
      max-width: 100%;
    }
  }

  &__left,
  &__right {
    .@{popupPrefix}-content {
      height: 100%;
    }
  }

  &__center {
    .@{popupPrefix}-content {
      border-radius: @radius-sm;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }

  &__right {
    .@{popupPrefix}-content {
      left: 100%;
      transform: translate(-100%, 0);
    }
  }

  &__bottom {
    .@{popupPrefix}-content {
      border-radius: @radius-md @radius-md 0 0;
      top: 100%;
      transform: translate(0, -100%);
    }
  }

  /*
   * 全局动画transform与popup自带的transform矛盾，要对动画参数进行细微订正
   */

  /* bottom => top */
  .effect() {
    animation-duration: 0.2s;
    animation-fill-mode: both;
    animation-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2);
  }

  &-slide-up-enter,
  &-slide-up-appear {
    transform: translate(0, 0);
  }

  &-slide-up-enter,
  &-slide-up-appear,
  &-slide-up-exit {
    .effect();

    animation-play-state: paused;
  }

  &-slide-up-enter&-slide-up-enter-active,
  &-slide-up-appear&-slide-up-appear-active {
    animation-name: DoraPopupSlideUpIn;
    animation-play-state: running;
  }

  &-slide-up-exit&-slide-up-exit-active {
    animation-name: DoraPopupSlideUpOut;
    animation-play-state: running;
  }

  @keyframes DoraPopupSlideUpIn {
    0% {
      transform: translate(0, 0);
    }

    100% {
      transform: translate(0, -100%);
    }
  }

  @keyframes DoraPopupSlideUpOut {
    0% {
      transform: translate(0, -100%);
    }

    100% {
      transform: translate(0, 0);
    }
  }

  /* right => left */
  &-slide-left-enter,
  &-slide-left-appear {
    transform: translate(0, 0);
  }

  &-slide-left-enter,
  &-slide-left-appear,
  &-slide-left-exit {
    .effect();

    animation-play-state: paused;
  }

  &-slide-left-enter&-slide-left-enter-active,
  &-slide-left-appear&-slide-left-appear-active {
    animation-name: DoraPopupSlideLeftIn;
    animation-play-state: running;
  }

  &-slide-left-exit&-slide-left-exit-active {
    animation-name: DoraPopupSlideLeftOut;
    animation-play-state: running;
  }

  @keyframes DoraPopupSlideLeftIn {
    0% {
      transform: translate(0, 0);
    }

    100% {
      transform: translate(-100%, 0);
    }
  }

  @keyframes DoraPopupSlideLeftOut {
    0% {
      transform: translate(-100%, 0);
    }

    100% {
      transform: translate(0, 0);
    }
  }
}
